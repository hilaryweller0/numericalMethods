!-----------------------------------------------------------------------------
! (C) Crown copyright 2024 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> @brief Computes the vertical mass flux using PPM.
!> @details This kernel reconstructs a field using the PPM scheme, and
!!          then computes the fractional mass flux as
!!          flux = wind * reconstruction
!!          The PPM scheme is equivalent to fitting a quadratic to the cell such
!!          that the integral of the quadratic equals the integral of the field
!!          in the cell, and the quadratic matches the field (interpolated with
!!          fourth-order accuracy) values at cell edges. A limiter can be
!!          applied to ensure monotonicity.
!!          This kernel is designed to work in the vertical direction only and
!!          takes into account the vertical boundaries and grid spacing.
!!
!!          Note that this kernel only works when field is a W3 field at lowest
!!          order, since it is assumed that ndf_w3 = 1.

module ffsl_flux_z_ppm_kernel_mod

use argument_mod,                   only : arg_type,              &
                                           GH_FIELD, GH_REAL,     &
                                           GH_READ, GH_WRITE,     &
                                           GH_SCALAR, GH_INTEGER, &
                                           GH_LOGICAL, CELL_COLUMN
use fs_continuity_mod,              only : W3, W2v
use constants_mod,                  only : r_tran, i_def, l_def, EPS_R_TRAN
use kernel_mod,                     only : kernel_type
use transport_enumerated_types_mod, only : vertical_monotone_relaxed,  &
                                           vertical_monotone_strict,   &
                                           vertical_monotone_positive, &
                                           vertical_monotone_qm_pos

implicit none

private

!-------------------------------------------------------------------------------
! Public types
!-------------------------------------------------------------------------------
!> The type declaration for the kernel. Contains the metadata needed by the Psy layer
type, public, extends(kernel_type) :: ffsl_flux_z_ppm_kernel_type
  private
  type(arg_type) :: meta_args(10) = (/                  &
       arg_type(GH_FIELD,  GH_REAL,    GH_WRITE, W2v), & ! flux
       arg_type(GH_FIELD,  GH_REAL,    GH_READ,  W2v), & ! frac_wind
       arg_type(GH_FIELD,  GH_REAL,    GH_READ,  W2v), & ! dep pts
       arg_type(GH_FIELD,  GH_REAL,    GH_READ,  W3),  & ! field
       arg_type(GH_FIELD,  GH_REAL,    GH_READ,  W3),  & ! dz
       arg_type(GH_FIELD,  GH_REAL,    GH_READ,  W3),  & ! detj
       arg_type(GH_SCALAR, GH_REAL,    GH_READ),       & ! dt
       arg_type(GH_SCALAR, GH_INTEGER, GH_READ),       & ! monotone
       arg_type(GH_SCALAR, GH_REAL,    GH_READ),       & ! min_val
       arg_type(GH_SCALAR, GH_LOGICAL, GH_READ)        & ! log_space
       /)
  integer :: operates_on = CELL_COLUMN
contains
  procedure, nopass :: ffsl_flux_z_ppm_code
end type

!-------------------------------------------------------------------------------
! Contained functions/subroutines
!-------------------------------------------------------------------------------
public :: ffsl_flux_z_ppm_code

contains

!> @brief Compute the flux using the PPM reconstruction.
!> @param[in]     nlayers   Number of layers
!> @param[in,out] flux      The flux to be computed
!> @param[in]     frac_wind The fractional vertical wind
!> @param[in]     dep_dist  The vertical departure points
!> @param[in]     field     The field to construct the flux
!> @param[in]     dz        Vertical length of the W3 cell
!> @param[in]     detj      Volume of cells
!> @param[in]     dt        Time step
!> @param[in]     monotone  Monotonicity option to use
!> @param[in]     min_val   Minimum value to enforce when using
!!                          quasi-monotone limiter for PPM
!> @param[in]     log_space Switch to use natural logarithmic space
!!                          for edge interpolation
!> @param[in]     ndf_w2v   Number of degrees of freedom for W2v per cell
!> @param[in]     undf_w2v  Number of unique degrees of freedom for W2v
!> @param[in]     map_w2v   The dofmap for the W2v cell at the base of the column
!> @param[in]     ndf_w3    Number of degrees of freedom for W3 per cell
!> @param[in]     undf_w3   Number of unique degrees of freedom for W3
!> @param[in]     map_w3    The dofmap for the cell at the base of the column
subroutine ffsl_flux_z_ppm_code( nlayers,   &
                                 flux,      &
                                 frac_wind, &
                                 dep_dist,  &
                                 field,     &
                                 dz,        &
                                 detj,      &
                                 dt,        &
                                 monotone,  &
                                 min_val,   &
                                 log_space, &
                                 ndf_w2v,   &
                                 undf_w2v,  &
                                 map_w2v,   &
                                 ndf_w3,    &
                                 undf_w3,   &
                                 map_w3 )

  use subgrid_vertical_support_mod, only: vertical_ppm_recon,                  &
                                          vertical_ppm_mono_relax,             &
                                          vertical_ppm_mono_strict,            &
                                          vertical_ppm_positive,               &
                                          fourth_order_vertical_edge,          &
                                          fourth_order_vertical_mono,          &
                                          fourth_order_vertical_quasi_mono

  implicit none

  ! Arguments
  integer(kind=i_def), intent(in)    :: nlayers
  integer(kind=i_def), intent(in)    :: undf_w2v
  integer(kind=i_def), intent(in)    :: ndf_w2v
  integer(kind=i_def), intent(in)    :: undf_w3
  integer(kind=i_def), intent(in)    :: ndf_w3
  real(kind=r_tran),   intent(inout) :: flux(undf_w2v)
  real(kind=r_tran),   intent(in)    :: field(undf_w3)
  real(kind=r_tran),   intent(in)    :: frac_wind(undf_w2v)
  real(kind=r_tran),   intent(in)    :: dep_dist(undf_w2v)
  real(kind=r_tran),   intent(in)    :: dz(undf_w3)
  real(kind=r_tran),   intent(in)    :: detj(undf_w3)
  integer(kind=i_def), intent(in)    :: map_w3(ndf_w3)
  integer(kind=i_def), intent(in)    :: map_w2v(ndf_w2v)
  real(kind=r_tran),   intent(in)    :: dt
  integer(kind=i_def), intent(in)    :: monotone
  real(kind=r_tran),   intent(in)    :: min_val
  logical(kind=l_def), intent(in)    :: log_space

  ! Internal variables
  integer(kind=i_def) :: k, i, w2v_idx, w3_idx
  integer(kind=i_def) :: int_displacement, sign_displacement
  integer(kind=i_def) :: dep_cell_idx, sign_offset
  integer(kind=i_def) :: local_edge_idx
  integer(kind=i_def) :: lowest_whole_cell, highest_whole_cell

  real(kind=r_tran)   :: displacement, frac_dist
  real(kind=r_tran)   :: reconstruction, mass_whole_cells
  real(kind=r_tran)   :: edge_value(0:nlayers)
  real(kind=r_tran)   :: log_field(4)

  w3_idx = map_w3(1)
  w2v_idx = map_w2v(1)

  ! ========================================================================== !
  ! Reconstruct edge values
  ! ========================================================================== !
  ! Need to take special care at the domain bottoms and tops
  ! Here we shift the field and dz values for the edge reconstruction

  if (log_space) then ! --------------------------------------------------------

    local_edge_idx = 0
    log_field(:) = LOG(MAX(ABS(field(w3_idx : w3_idx+3)), EPS_R_TRAN))
    call fourth_order_vertical_edge(log_field, dz(w3_idx : w3_idx+3),          &
                                    local_edge_idx, edge_value(0))

    local_edge_idx = 1
    log_field(:) = LOG(MAX(ABS(field(w3_idx : w3_idx+3)), EPS_R_TRAN))
    call fourth_order_vertical_edge(log_field, dz(w3_idx : w3_idx+3),          &
                                    local_edge_idx, edge_value(1))

    local_edge_idx = 2
    do k = 2, nlayers - 2
      log_field(:) = LOG(MAX(ABS(field(w3_idx+k-2 : w3_idx+k+1)), EPS_R_TRAN))
      call fourth_order_vertical_edge(log_field, dz(w3_idx+k-2 : w3_idx+k+1),  &
                                      local_edge_idx, edge_value(k))
    end do

    local_edge_idx = 3
    k = nlayers - 1
    log_field(:) = LOG(MAX(ABS(field(w3_idx+k-3 : w3_idx+k)), EPS_R_TRAN))
    call fourth_order_vertical_edge(log_field, dz(w3_idx+k-3 : w3_idx+k),      &
                                    local_edge_idx, edge_value(k))

    local_edge_idx = 4
    k = nlayers
    log_field(:) = LOG(MAX(ABS(field(w3_idx+k-4 : w3_idx+k-1)), EPS_R_TRAN))
    call fourth_order_vertical_edge(log_field, dz(w3_idx+k-4 : w3_idx+k-1),    &
                                    local_edge_idx, edge_value(k))

    ! Convert back from log space
    edge_value(:) = EXP(edge_value(:))

  else ! Not log-space ---------------------------------------------------------

    local_edge_idx = 0
    call fourth_order_vertical_edge(field(w3_idx : w3_idx+3),                  &
                                    dz(w3_idx : w3_idx+3),                     &
                                    local_edge_idx, edge_value(0))

    local_edge_idx = 1
    call fourth_order_vertical_edge(field(w3_idx : w3_idx+3),                  &
                                    dz(w3_idx : w3_idx+3),                     &
                                    local_edge_idx, edge_value(1))

    local_edge_idx = 2
    do k = 2, nlayers - 2
      ! Perform edge reconstruction --------------------------------------------
      call fourth_order_vertical_edge(field(w3_idx+k-2 : w3_idx+k+1),          &
                                      dz(w3_idx+k-2 : w3_idx+k+1),             &
                                      local_edge_idx, edge_value(k))
    end do

    local_edge_idx = 3
    k = nlayers - 1
    call fourth_order_vertical_edge(field(w3_idx+k-3 : w3_idx+k),              &
                                    dz(w3_idx+k-3 : w3_idx+k),                 &
                                    local_edge_idx, edge_value(k))

    local_edge_idx = 4
    k = nlayers
    call fourth_order_vertical_edge(field(w3_idx+k-4 : w3_idx+k-1),            &
                                    dz(w3_idx+k-4 : w3_idx+k-1),               &
                                    local_edge_idx, edge_value(k))

  end if

  ! ========================================================================== !
  ! Apply monotonicity to edge reconstructions
  ! ========================================================================== !
  ! Loop again through edge reconstructions to limit them
  select case ( monotone )
  case ( vertical_monotone_strict, vertical_monotone_relaxed )
    edge_value(0) = min( max( field(w3_idx), field(w3_idx+1) ),                &
                         max( edge_value(0), min( field(w3_idx),               &
                                                  field(w3_idx+1) ) ) )

    local_edge_idx = 1
    call fourth_order_vertical_mono(field(w3_idx : w3_idx+3),                  &
                                    local_edge_idx, edge_value(1))

    local_edge_idx = 2
    do k = 2, nlayers - 2
      ! Perform edge reconstruction --------------------------------------------
      call fourth_order_vertical_mono(field(w3_idx+k-2 : w3_idx+k+1),          &
                                      local_edge_idx, edge_value(k))
    end do

    local_edge_idx = 3
    k = nlayers - 1
    call fourth_order_vertical_mono(field(w3_idx+k-3 : w3_idx+k),              &
                                    local_edge_idx, edge_value(k))

    k = nlayers
    edge_value(k) = min( max( field(w3_idx+k-2), field(w3_idx+k-1) ),          &
                         max( edge_value(k), min( field(w3_idx+k-2),           &
                                                  field(w3_idx+k-1) ) ) )

  case ( vertical_monotone_qm_pos )
    edge_value(0) = min( max( field(w3_idx), field(w3_idx+1) ),                &
                         max( edge_value(0), min( field(w3_idx),               &
                                                  field(w3_idx+1) ) ) )

    local_edge_idx = 1
    call fourth_order_vertical_mono(field(w3_idx : w3_idx+3),                  &
                                          local_edge_idx, edge_value(1))

    local_edge_idx = 2
    do k = 2, nlayers - 2
      ! Perform edge reconstruction --------------------------------------------
      call fourth_order_vertical_quasi_mono(field(w3_idx+k-2 : w3_idx+k+1),    &
                                            dep_dist(w2v_idx + k), min_val,    &
                                            edge_value(k))
    end do

    local_edge_idx = 3
    k = nlayers - 1
    call fourth_order_vertical_mono(field(w3_idx+k-3 : w3_idx+k),              &
                                          local_edge_idx, edge_value(k))

    k = nlayers
    edge_value(k) = min( max( field(w3_idx+k-2), field(w3_idx+k-1) ),          &
                         max( edge_value(k), min( field(w3_idx+k-2),           &
                                                  field(w3_idx+k-1) ) ) )

  case ( vertical_monotone_positive )
    do k = 0, nlayers
      edge_value(k) = max(edge_value(k),0.0_r_tran)
    end do

  end select

  ! ========================================================================== !
  ! Build fluxes
  ! ========================================================================== !

  ! Force bottom flux to be zero
  flux(w2v_idx) = 0.0_r_tran

  ! Loop through faces
  do k = 1, nlayers - 1

    ! Pull out departure point, and separate into integer / frac parts
    displacement = dep_dist(w2v_idx + k)
    int_displacement = INT(displacement, i_def)
    frac_dist = displacement - REAL(int_displacement, r_tran)
    sign_displacement = INT(SIGN(1.0_r_tran, displacement))

    ! Set an offset for the stencil index, based on dep point sign
    sign_offset = (1 - sign_displacement) / 2   ! 0 if sign == 1, 1 if sign == -1

    ! Determine departure cell
    dep_cell_idx = k - int_displacement + sign_offset - 1

    ! ======================================================================== !
    ! Integer sum
    mass_whole_cells = 0.0_r_tran
    lowest_whole_cell = MIN(dep_cell_idx + 1, k)
    highest_whole_cell = MAX(dep_cell_idx, k) - 1
    do i = lowest_whole_cell, highest_whole_cell
      mass_whole_cells = mass_whole_cells + field(w3_idx + i) * detj(w3_idx + i)
    end do

    ! ======================================================================== !
    ! Perform reversible PPM reconstruction for fractional part
    call vertical_ppm_recon(reconstruction, frac_dist,    &
                            field(w3_idx + dep_cell_idx), &  ! field in dep cell
                            edge_value(dep_cell_idx),     &  ! edge below dep cell
                            edge_value(dep_cell_idx + 1))    ! edge above dep cell

    ! ======================================================================== !
    ! Apply monotonicity for fractional part
    select case ( monotone )
    case ( vertical_monotone_strict )
      call vertical_ppm_mono_strict(reconstruction,               &
                                    field(w3_idx + dep_cell_idx), &
                                    edge_value(dep_cell_idx),     &
                                    edge_value(dep_cell_idx + 1))

    case ( vertical_monotone_relaxed, vertical_monotone_qm_pos )
      call vertical_ppm_mono_relax(reconstruction, frac_dist,    &
                                   field(w3_idx + dep_cell_idx), &
                                   edge_value(dep_cell_idx),     &
                                   edge_value(dep_cell_idx + 1))

    case ( vertical_monotone_positive )
      call vertical_ppm_positive(reconstruction, frac_dist,    &
                                 field(w3_idx + dep_cell_idx), &
                                 edge_value(dep_cell_idx),     &
                                 edge_value(dep_cell_idx + 1))

    end select

    ! ======================================================================== !
    ! Compute flux
    flux(w2v_idx + k) = (frac_wind(w2v_idx + k) * reconstruction               &
                         + sign(1.0_r_tran, displacement) * mass_whole_cells) / dt

  end do

  ! Force top flux to be zero
  flux(w2v_idx + nlayers) = 0.0_r_tran

end subroutine ffsl_flux_z_ppm_code

end module ffsl_flux_z_ppm_kernel_mod
